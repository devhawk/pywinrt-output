// WARNING: Please don't edit this file. It was generated by Python/WinRT

#include "py.Windows.Foundation.Collections.h"

// ----- PropertySet class --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Collections::PropertySet>::python_type;

static PyObject* PropertySet_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }
    
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Foundation::Collections::PropertySet instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static void PropertySet_dealloc(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* PropertySet_Clear(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Clear();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_First(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.First();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_GetView(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.GetView();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_HasKey(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.HasKey(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_Insert(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);
            
            auto return_value = self->obj.Insert(param0, param1);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_Lookup(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.Lookup(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_Remove(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            self->obj.Remove(param0);
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* PropertySet_get_Size(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Size();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* PropertySet_add_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::Windows::Foundation::IInspectable>>(arg);
        
        auto return_value = self->obj.MapChanged(param0);
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* PropertySet_remove_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::event_token>(arg);
        
        self->obj.MapChanged(param0);
        
        Py_RETURN_NONE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __PropertySet_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Foundation::Collections::PropertySet>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __PropertySet_iter(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self)
{
    try
    {
        return py::convert(self->obj.First());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static Py_ssize_t __PropertySet_mp_length(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self)
{
    try
    {
        return static_cast<Py_ssize_t>(self->obj.Size());
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyObject* __PropertySet_mp_subscript(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* key)
{
    try
    {
        return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int __PropertySet_mp_ass_item(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>* self, PyObject* key, PyObject* value)
{
    try
    {
        if (value == nullptr) { self->obj.Remove(py::convert_to<winrt::hstring>(key)); }
        else { self->obj.Insert(py::convert_to<winrt::hstring>(key), py::convert_to<winrt::Windows::Foundation::IInspectable>(value)); }
        return 0;
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyMethodDef PropertySet_methods[] = {
    { "Clear", (PyCFunction)PropertySet_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)PropertySet_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)PropertySet_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)PropertySet_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)PropertySet_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)PropertySet_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)PropertySet_Remove, METH_VARARGS, nullptr },
    { "add_MapChanged", (PyCFunction)PropertySet_add_MapChanged, METH_O, nullptr },
    { "remove_MapChanged", (PyCFunction)PropertySet_remove_MapChanged, METH_O, nullptr },
    { "_from", (PyCFunction)__PropertySet_from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyGetSetDef PropertySet_getset[] = {
    { const_cast<char*>("Size"), (getter)PropertySet_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot PropertySet_Type_slots[] = 
{
    { Py_tp_dealloc, PropertySet_dealloc },
    { Py_tp_new, PropertySet_new },
    { Py_tp_methods, PropertySet_methods },
    { Py_tp_getset, PropertySet_getset },
    { Py_tp_iter, __PropertySet_iter },
    { Py_mp_length, __PropertySet_mp_length },
    { Py_mp_subscript, __PropertySet_mp_subscript },
    { Py_mp_ass_subscript, __PropertySet_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec PropertySet_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.PropertySet",
    sizeof(py::winrt_wrapper<winrt::Windows::Foundation::Collections::PropertySet>),
    0,
    Py_TPFLAGS_DEFAULT,
    PropertySet_Type_slots
};

// ----- StringMap class --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Collections::StringMap>::python_type;

static PyObject* StringMap_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }
    
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Foundation::Collections::StringMap instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static void StringMap_dealloc(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* StringMap_Clear(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Clear();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_First(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.First();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_GetView(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.GetView();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_HasKey(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.HasKey(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_Insert(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::hstring>(args, 1);
            
            auto return_value = self->obj.Insert(param0, param1);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_Lookup(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.Lookup(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_Remove(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            self->obj.Remove(param0);
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* StringMap_get_Size(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Size();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* StringMap_add_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::hstring>>(arg);
        
        auto return_value = self->obj.MapChanged(param0);
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* StringMap_remove_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::event_token>(arg);
        
        self->obj.MapChanged(param0);
        
        Py_RETURN_NONE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __StringMap_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Foundation::Collections::StringMap>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __StringMap_iter(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self)
{
    try
    {
        return py::convert(self->obj.First());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static Py_ssize_t __StringMap_mp_length(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self)
{
    try
    {
        return static_cast<Py_ssize_t>(self->obj.Size());
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyObject* __StringMap_mp_subscript(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* key)
{
    try
    {
        return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int __StringMap_mp_ass_item(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>* self, PyObject* key, PyObject* value)
{
    try
    {
        if (value == nullptr) { self->obj.Remove(py::convert_to<winrt::hstring>(key)); }
        else { self->obj.Insert(py::convert_to<winrt::hstring>(key), py::convert_to<winrt::hstring>(value)); }
        return 0;
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyMethodDef StringMap_methods[] = {
    { "Clear", (PyCFunction)StringMap_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)StringMap_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)StringMap_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)StringMap_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)StringMap_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)StringMap_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)StringMap_Remove, METH_VARARGS, nullptr },
    { "add_MapChanged", (PyCFunction)StringMap_add_MapChanged, METH_O, nullptr },
    { "remove_MapChanged", (PyCFunction)StringMap_remove_MapChanged, METH_O, nullptr },
    { "_from", (PyCFunction)__StringMap_from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyGetSetDef StringMap_getset[] = {
    { const_cast<char*>("Size"), (getter)StringMap_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot StringMap_Type_slots[] = 
{
    { Py_tp_dealloc, StringMap_dealloc },
    { Py_tp_new, StringMap_new },
    { Py_tp_methods, StringMap_methods },
    { Py_tp_getset, StringMap_getset },
    { Py_tp_iter, __StringMap_iter },
    { Py_mp_length, __StringMap_mp_length },
    { Py_mp_subscript, __StringMap_mp_subscript },
    { Py_mp_ass_subscript, __StringMap_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec StringMap_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.StringMap",
    sizeof(py::winrt_wrapper<winrt::Windows::Foundation::Collections::StringMap>),
    0,
    Py_TPFLAGS_DEFAULT,
    StringMap_Type_slots
};

// ----- ValueSet class --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Collections::ValueSet>::python_type;

static PyObject* ValueSet_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    if (kwds != nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "keyword arguments not supported");
        return nullptr;
    }
    
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            winrt::Windows::Foundation::Collections::ValueSet instance{  };
            return py::wrap(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static void ValueSet_dealloc(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* ValueSet_Clear(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Clear();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_First(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.First();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_GetView(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.GetView();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_HasKey(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.HasKey(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_Insert(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);
            
            auto return_value = self->obj.Insert(param0, param1);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_Lookup(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.Lookup(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_Remove(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            self->obj.Remove(param0);
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* ValueSet_get_Size(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Size();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* ValueSet_add_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::Windows::Foundation::IInspectable>>(arg);
        
        auto return_value = self->obj.MapChanged(param0);
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* ValueSet_remove_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::event_token>(arg);
        
        self->obj.MapChanged(param0);
        
        Py_RETURN_NONE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __ValueSet_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Foundation::Collections::ValueSet>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __ValueSet_iter(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self)
{
    try
    {
        return py::convert(self->obj.First());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static Py_ssize_t __ValueSet_mp_length(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self)
{
    try
    {
        return static_cast<Py_ssize_t>(self->obj.Size());
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyObject* __ValueSet_mp_subscript(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* key)
{
    try
    {
        return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int __ValueSet_mp_ass_item(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>* self, PyObject* key, PyObject* value)
{
    try
    {
        if (value == nullptr) { self->obj.Remove(py::convert_to<winrt::hstring>(key)); }
        else { self->obj.Insert(py::convert_to<winrt::hstring>(key), py::convert_to<winrt::Windows::Foundation::IInspectable>(value)); }
        return 0;
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyMethodDef ValueSet_methods[] = {
    { "Clear", (PyCFunction)ValueSet_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)ValueSet_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)ValueSet_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)ValueSet_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)ValueSet_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)ValueSet_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)ValueSet_Remove, METH_VARARGS, nullptr },
    { "add_MapChanged", (PyCFunction)ValueSet_add_MapChanged, METH_O, nullptr },
    { "remove_MapChanged", (PyCFunction)ValueSet_remove_MapChanged, METH_O, nullptr },
    { "_from", (PyCFunction)__ValueSet_from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyGetSetDef ValueSet_getset[] = {
    { const_cast<char*>("Size"), (getter)ValueSet_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot ValueSet_Type_slots[] = 
{
    { Py_tp_dealloc, ValueSet_dealloc },
    { Py_tp_new, ValueSet_new },
    { Py_tp_methods, ValueSet_methods },
    { Py_tp_getset, ValueSet_getset },
    { Py_tp_iter, __ValueSet_iter },
    { Py_mp_length, __ValueSet_mp_length },
    { Py_mp_subscript, __ValueSet_mp_subscript },
    { Py_mp_ass_subscript, __ValueSet_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec ValueSet_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.ValueSet",
    sizeof(py::winrt_wrapper<winrt::Windows::Foundation::Collections::ValueSet>),
    0,
    Py_TPFLAGS_DEFAULT,
    ValueSet_Type_slots
};

// ----- IIterable interface --------------------

PyTypeObject* py::winrt_type<pyIIterable>::python_type;

PyObject* IIterable_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IIterable interface is not activatable");
    return nullptr;
}

static void IIterable_dealloc(py::winrt_pinterface_wrapper<pyIIterable>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IIterable_First(py::winrt_pinterface_wrapper<pyIIterable>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* __IIterable_iter(py::winrt_pinterface_wrapper<pyIIterable>* self)
{
    return self->obj->dunder_iter();
}

static PyMethodDef IIterable_methods[] = {
    { "First", (PyCFunction)IIterable_First, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IIterable_getset[] = {
    { nullptr }
};

static PyType_Slot IIterable_Type_slots[] = 
{
    { Py_tp_dealloc, IIterable_dealloc },
    { Py_tp_new, IIterable_new },
    { Py_tp_methods, IIterable_methods },
    { Py_tp_getset, IIterable_getset },
    { Py_tp_iter, __IIterable_iter },
    { 0, nullptr },
};

static PyType_Spec IIterable_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IIterable",
    sizeof(py::winrt_pinterface_wrapper<pyIIterable>),
    0,
    Py_TPFLAGS_DEFAULT,
    IIterable_Type_slots
};

// ----- IIterator interface --------------------

PyTypeObject* py::winrt_type<pyIIterator>::python_type;

PyObject* IIterator_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IIterator interface is not activatable");
    return nullptr;
}

static void IIterator_dealloc(py::winrt_pinterface_wrapper<pyIIterator>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IIterator_GetMany(py::winrt_pinterface_wrapper<pyIIterator>* self, PyObject* args)
{
    return self->obj->GetMany(args);
}

static PyObject* IIterator_MoveNext(py::winrt_pinterface_wrapper<pyIIterator>* self, PyObject* args)
{
    return self->obj->MoveNext(args);
}

static PyObject* IIterator_get_Current(py::winrt_pinterface_wrapper<pyIIterator>* self, void* /*unused*/)
{
    return self->obj->get_Current(/*unused*/);
}

static PyObject* IIterator_get_HasCurrent(py::winrt_pinterface_wrapper<pyIIterator>* self, void* /*unused*/)
{
    return self->obj->get_HasCurrent(/*unused*/);
}

static PyObject* __IIterator_iter(py::winrt_pinterface_wrapper<pyIIterator>* self)
{
    try
    {
        return reinterpret_cast<PyObject*>(self);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IIterator_iternext(py::winrt_pinterface_wrapper<pyIIterator>* self)
{
    return self->obj->dunder_iternext();
}

static PyMethodDef IIterator_methods[] = {
    { "GetMany", (PyCFunction)IIterator_GetMany, METH_VARARGS, nullptr },
    { "MoveNext", (PyCFunction)IIterator_MoveNext, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IIterator_getset[] = {
    { const_cast<char*>("Current"), (getter)IIterator_get_Current, nullptr, nullptr, nullptr },
    { const_cast<char*>("HasCurrent"), (getter)IIterator_get_HasCurrent, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IIterator_Type_slots[] = 
{
    { Py_tp_dealloc, IIterator_dealloc },
    { Py_tp_new, IIterator_new },
    { Py_tp_methods, IIterator_methods },
    { Py_tp_getset, IIterator_getset },
    { Py_tp_iter, __IIterator_iter },
    { Py_tp_iternext, __IIterator_iternext },
    { 0, nullptr },
};

static PyType_Spec IIterator_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IIterator",
    sizeof(py::winrt_pinterface_wrapper<pyIIterator>),
    0,
    Py_TPFLAGS_DEFAULT,
    IIterator_Type_slots
};

// ----- IKeyValuePair interface --------------------

PyTypeObject* py::winrt_type<pyIKeyValuePair>::python_type;

PyObject* IKeyValuePair_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IKeyValuePair interface is not activatable");
    return nullptr;
}

static void IKeyValuePair_dealloc(py::winrt_pinterface_wrapper<pyIKeyValuePair>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IKeyValuePair_get_Key(py::winrt_pinterface_wrapper<pyIKeyValuePair>* self, void* /*unused*/)
{
    return self->obj->get_Key(/*unused*/);
}

static PyObject* IKeyValuePair_get_Value(py::winrt_pinterface_wrapper<pyIKeyValuePair>* self, void* /*unused*/)
{
    return self->obj->get_Value(/*unused*/);
}

static PyMethodDef IKeyValuePair_methods[] = {
    { nullptr }
};

static PyGetSetDef IKeyValuePair_getset[] = {
    { const_cast<char*>("Key"), (getter)IKeyValuePair_get_Key, nullptr, nullptr, nullptr },
    { const_cast<char*>("Value"), (getter)IKeyValuePair_get_Value, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IKeyValuePair_Type_slots[] = 
{
    { Py_tp_dealloc, IKeyValuePair_dealloc },
    { Py_tp_new, IKeyValuePair_new },
    { Py_tp_methods, IKeyValuePair_methods },
    { Py_tp_getset, IKeyValuePair_getset },
    { 0, nullptr },
};

static PyType_Spec IKeyValuePair_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IKeyValuePair",
    sizeof(py::winrt_pinterface_wrapper<pyIKeyValuePair>),
    0,
    Py_TPFLAGS_DEFAULT,
    IKeyValuePair_Type_slots
};

// ----- IMapChangedEventArgs interface --------------------

PyTypeObject* py::winrt_type<pyIMapChangedEventArgs>::python_type;

PyObject* IMapChangedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMapChangedEventArgs interface is not activatable");
    return nullptr;
}

static void IMapChangedEventArgs_dealloc(py::winrt_pinterface_wrapper<pyIMapChangedEventArgs>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IMapChangedEventArgs_get_CollectionChange(py::winrt_pinterface_wrapper<pyIMapChangedEventArgs>* self, void* /*unused*/)
{
    return self->obj->get_CollectionChange(/*unused*/);
}

static PyObject* IMapChangedEventArgs_get_Key(py::winrt_pinterface_wrapper<pyIMapChangedEventArgs>* self, void* /*unused*/)
{
    return self->obj->get_Key(/*unused*/);
}

static PyMethodDef IMapChangedEventArgs_methods[] = {
    { nullptr }
};

static PyGetSetDef IMapChangedEventArgs_getset[] = {
    { const_cast<char*>("CollectionChange"), (getter)IMapChangedEventArgs_get_CollectionChange, nullptr, nullptr, nullptr },
    { const_cast<char*>("Key"), (getter)IMapChangedEventArgs_get_Key, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IMapChangedEventArgs_Type_slots[] = 
{
    { Py_tp_dealloc, IMapChangedEventArgs_dealloc },
    { Py_tp_new, IMapChangedEventArgs_new },
    { Py_tp_methods, IMapChangedEventArgs_methods },
    { Py_tp_getset, IMapChangedEventArgs_getset },
    { 0, nullptr },
};

static PyType_Spec IMapChangedEventArgs_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IMapChangedEventArgs",
    sizeof(py::winrt_pinterface_wrapper<pyIMapChangedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMapChangedEventArgs_Type_slots
};

// ----- IMapView interface --------------------

PyTypeObject* py::winrt_type<pyIMapView>::python_type;

PyObject* IMapView_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMapView interface is not activatable");
    return nullptr;
}

static void IMapView_dealloc(py::winrt_pinterface_wrapper<pyIMapView>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IMapView_First(py::winrt_pinterface_wrapper<pyIMapView>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IMapView_HasKey(py::winrt_pinterface_wrapper<pyIMapView>* self, PyObject* args)
{
    return self->obj->HasKey(args);
}

static PyObject* IMapView_Lookup(py::winrt_pinterface_wrapper<pyIMapView>* self, PyObject* args)
{
    return self->obj->Lookup(args);
}

static PyObject* IMapView_Split(py::winrt_pinterface_wrapper<pyIMapView>* self, PyObject* args)
{
    return self->obj->Split(args);
}

static PyObject* IMapView_get_Size(py::winrt_pinterface_wrapper<pyIMapView>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* __IMapView_iter(py::winrt_pinterface_wrapper<pyIMapView>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IMapView_mp_length(py::winrt_pinterface_wrapper<pyIMapView>* self)
{
    return self->obj->_mp_length();
}

static PyObject* __IMapView_mp_subscript(py::winrt_pinterface_wrapper<pyIMapView>* self, PyObject* key)
{
    return self->obj->_mp_subscript(key);
}

static PyMethodDef IMapView_methods[] = {
    { "First", (PyCFunction)IMapView_First, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)IMapView_HasKey, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)IMapView_Lookup, METH_VARARGS, nullptr },
    { "Split", (PyCFunction)IMapView_Split, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IMapView_getset[] = {
    { const_cast<char*>("Size"), (getter)IMapView_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IMapView_Type_slots[] = 
{
    { Py_tp_dealloc, IMapView_dealloc },
    { Py_tp_new, IMapView_new },
    { Py_tp_methods, IMapView_methods },
    { Py_tp_getset, IMapView_getset },
    { Py_tp_iter, __IMapView_iter },
    { Py_mp_length, __IMapView_mp_length },
    { Py_mp_subscript, __IMapView_mp_subscript },
    { 0, nullptr },
};

static PyType_Spec IMapView_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IMapView",
    sizeof(py::winrt_pinterface_wrapper<pyIMapView>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMapView_Type_slots
};

// ----- IMap interface --------------------

PyTypeObject* py::winrt_type<pyIMap>::python_type;

PyObject* IMap_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IMap interface is not activatable");
    return nullptr;
}

static void IMap_dealloc(py::winrt_pinterface_wrapper<pyIMap>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IMap_Clear(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->Clear(args);
}

static PyObject* IMap_First(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IMap_GetView(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->GetView(args);
}

static PyObject* IMap_HasKey(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->HasKey(args);
}

static PyObject* IMap_Insert(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->Insert(args);
}

static PyObject* IMap_Lookup(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->Lookup(args);
}

static PyObject* IMap_Remove(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* args)
{
    return self->obj->Remove(args);
}

static PyObject* IMap_get_Size(py::winrt_pinterface_wrapper<pyIMap>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* __IMap_iter(py::winrt_pinterface_wrapper<pyIMap>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IMap_mp_length(py::winrt_pinterface_wrapper<pyIMap>* self)
{
    return self->obj->_mp_length();
}

static PyObject* __IMap_mp_subscript(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* key)
{
    return self->obj->_mp_subscript(key);
}

static int __IMap_mp_ass_item(py::winrt_pinterface_wrapper<pyIMap>* self, PyObject* key, PyObject* value)
{
    return self->obj->_mp_ass_item(key, value);
}

static PyMethodDef IMap_methods[] = {
    { "Clear", (PyCFunction)IMap_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)IMap_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)IMap_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)IMap_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)IMap_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)IMap_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)IMap_Remove, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IMap_getset[] = {
    { const_cast<char*>("Size"), (getter)IMap_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IMap_Type_slots[] = 
{
    { Py_tp_dealloc, IMap_dealloc },
    { Py_tp_new, IMap_new },
    { Py_tp_methods, IMap_methods },
    { Py_tp_getset, IMap_getset },
    { Py_tp_iter, __IMap_iter },
    { Py_mp_length, __IMap_mp_length },
    { Py_mp_subscript, __IMap_mp_subscript },
    { Py_mp_ass_subscript, __IMap_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec IMap_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IMap",
    sizeof(py::winrt_pinterface_wrapper<pyIMap>),
    0,
    Py_TPFLAGS_DEFAULT,
    IMap_Type_slots
};

// ----- IObservableMap interface --------------------

PyTypeObject* py::winrt_type<pyIObservableMap>::python_type;

PyObject* IObservableMap_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IObservableMap interface is not activatable");
    return nullptr;
}

static void IObservableMap_dealloc(py::winrt_pinterface_wrapper<pyIObservableMap>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IObservableMap_Clear(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->Clear(args);
}

static PyObject* IObservableMap_First(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IObservableMap_GetView(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->GetView(args);
}

static PyObject* IObservableMap_HasKey(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->HasKey(args);
}

static PyObject* IObservableMap_Insert(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->Insert(args);
}

static PyObject* IObservableMap_Lookup(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->Lookup(args);
}

static PyObject* IObservableMap_Remove(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* args)
{
    return self->obj->Remove(args);
}

static PyObject* IObservableMap_get_Size(py::winrt_pinterface_wrapper<pyIObservableMap>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* IObservableMap_add_MapChanged(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* arg)
{
    return self->obj->add_MapChanged(arg);
}

static PyObject* IObservableMap_remove_MapChanged(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* arg)
{
    return self->obj->remove_MapChanged(arg);
}

static PyObject* __IObservableMap_iter(py::winrt_pinterface_wrapper<pyIObservableMap>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IObservableMap_mp_length(py::winrt_pinterface_wrapper<pyIObservableMap>* self)
{
    return self->obj->_mp_length();
}

static PyObject* __IObservableMap_mp_subscript(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* key)
{
    return self->obj->_mp_subscript(key);
}

static int __IObservableMap_mp_ass_item(py::winrt_pinterface_wrapper<pyIObservableMap>* self, PyObject* key, PyObject* value)
{
    return self->obj->_mp_ass_item(key, value);
}

static PyMethodDef IObservableMap_methods[] = {
    { "Clear", (PyCFunction)IObservableMap_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)IObservableMap_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)IObservableMap_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)IObservableMap_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)IObservableMap_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)IObservableMap_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)IObservableMap_Remove, METH_VARARGS, nullptr },
    { "add_MapChanged", (PyCFunction)IObservableMap_add_MapChanged, METH_O, nullptr },
    { "remove_MapChanged", (PyCFunction)IObservableMap_remove_MapChanged, METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef IObservableMap_getset[] = {
    { const_cast<char*>("Size"), (getter)IObservableMap_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IObservableMap_Type_slots[] = 
{
    { Py_tp_dealloc, IObservableMap_dealloc },
    { Py_tp_new, IObservableMap_new },
    { Py_tp_methods, IObservableMap_methods },
    { Py_tp_getset, IObservableMap_getset },
    { Py_tp_iter, __IObservableMap_iter },
    { Py_mp_length, __IObservableMap_mp_length },
    { Py_mp_subscript, __IObservableMap_mp_subscript },
    { Py_mp_ass_subscript, __IObservableMap_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec IObservableMap_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IObservableMap",
    sizeof(py::winrt_pinterface_wrapper<pyIObservableMap>),
    0,
    Py_TPFLAGS_DEFAULT,
    IObservableMap_Type_slots
};

// ----- IObservableVector interface --------------------

PyTypeObject* py::winrt_type<pyIObservableVector>::python_type;

PyObject* IObservableVector_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IObservableVector interface is not activatable");
    return nullptr;
}

static void IObservableVector_dealloc(py::winrt_pinterface_wrapper<pyIObservableVector>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IObservableVector_Append(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->Append(args);
}

static PyObject* IObservableVector_Clear(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->Clear(args);
}

static PyObject* IObservableVector_First(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IObservableVector_GetAt(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->GetAt(args);
}

static PyObject* IObservableVector_GetMany(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->GetMany(args);
}

static PyObject* IObservableVector_GetView(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->GetView(args);
}

static PyObject* IObservableVector_IndexOf(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->IndexOf(args);
}

static PyObject* IObservableVector_InsertAt(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->InsertAt(args);
}

static PyObject* IObservableVector_RemoveAt(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->RemoveAt(args);
}

static PyObject* IObservableVector_RemoveAtEnd(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->RemoveAtEnd(args);
}

static PyObject* IObservableVector_ReplaceAll(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->ReplaceAll(args);
}

static PyObject* IObservableVector_SetAt(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* args)
{
    return self->obj->SetAt(args);
}

static PyObject* IObservableVector_get_Size(py::winrt_pinterface_wrapper<pyIObservableVector>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* IObservableVector_add_VectorChanged(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* arg)
{
    return self->obj->add_VectorChanged(arg);
}

static PyObject* IObservableVector_remove_VectorChanged(py::winrt_pinterface_wrapper<pyIObservableVector>* self, PyObject* arg)
{
    return self->obj->remove_VectorChanged(arg);
}

static PyObject* __IObservableVector_iter(py::winrt_pinterface_wrapper<pyIObservableVector>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IObservableVector_sq_length(py::winrt_pinterface_wrapper<pyIObservableVector>* self)
{
    return self->obj->_sq_length();
}

static PyObject* __IObservableVector_sq_item(py::winrt_pinterface_wrapper<pyIObservableVector>* self, Py_ssize_t i)
{
    return self->obj->_sq_item(i);
}

static int __IObservableVector_sq_ass_item(py::winrt_pinterface_wrapper<pyIObservableVector>* self, Py_ssize_t i, PyObject* value)
{
    return self->obj->_sq_ass_item(i, value);
}

static PyMethodDef IObservableVector_methods[] = {
    { "Append", (PyCFunction)IObservableVector_Append, METH_VARARGS, nullptr },
    { "Clear", (PyCFunction)IObservableVector_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)IObservableVector_First, METH_VARARGS, nullptr },
    { "GetAt", (PyCFunction)IObservableVector_GetAt, METH_VARARGS, nullptr },
    { "GetMany", (PyCFunction)IObservableVector_GetMany, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)IObservableVector_GetView, METH_VARARGS, nullptr },
    { "IndexOf", (PyCFunction)IObservableVector_IndexOf, METH_VARARGS, nullptr },
    { "InsertAt", (PyCFunction)IObservableVector_InsertAt, METH_VARARGS, nullptr },
    { "RemoveAt", (PyCFunction)IObservableVector_RemoveAt, METH_VARARGS, nullptr },
    { "RemoveAtEnd", (PyCFunction)IObservableVector_RemoveAtEnd, METH_VARARGS, nullptr },
    { "ReplaceAll", (PyCFunction)IObservableVector_ReplaceAll, METH_VARARGS, nullptr },
    { "SetAt", (PyCFunction)IObservableVector_SetAt, METH_VARARGS, nullptr },
    { "add_VectorChanged", (PyCFunction)IObservableVector_add_VectorChanged, METH_O, nullptr },
    { "remove_VectorChanged", (PyCFunction)IObservableVector_remove_VectorChanged, METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef IObservableVector_getset[] = {
    { const_cast<char*>("Size"), (getter)IObservableVector_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IObservableVector_Type_slots[] = 
{
    { Py_tp_dealloc, IObservableVector_dealloc },
    { Py_tp_new, IObservableVector_new },
    { Py_tp_methods, IObservableVector_methods },
    { Py_tp_getset, IObservableVector_getset },
    { Py_tp_iter, __IObservableVector_iter },
    { Py_sq_length, __IObservableVector_sq_length },
    { Py_sq_item, __IObservableVector_sq_item },
    { Py_sq_ass_item, __IObservableVector_sq_ass_item },
    { 0, nullptr },
};

static PyType_Spec IObservableVector_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IObservableVector",
    sizeof(py::winrt_pinterface_wrapper<pyIObservableVector>),
    0,
    Py_TPFLAGS_DEFAULT,
    IObservableVector_Type_slots
};

// ----- IPropertySet interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Collections::IPropertySet>::python_type;

PyObject* IPropertySet_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IPropertySet interface is not activatable");
    return nullptr;
}

static void IPropertySet_dealloc(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IPropertySet_Clear(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Clear();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_First(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.First();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_GetView(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            auto return_value = self->obj.GetView();
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_HasKey(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.HasKey(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_Insert(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 2)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            auto param1 = py::convert_to<winrt::Windows::Foundation::IInspectable>(args, 1);
            
            auto return_value = self->obj.Insert(param0, param1);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_Lookup(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            auto return_value = self->obj.Lookup(param0);
            
            py::pyobj_handle out_return_value{ py::convert(return_value) };
            if (!out_return_value) 
            { 
                return nullptr;
            }
            
            return out_return_value.detach();
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_Remove(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 1)
    {
        try
        {
            auto param0 = py::convert_to<winrt::hstring>(args, 0);
            
            self->obj.Remove(param0);
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IPropertySet_get_Size(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Size();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IPropertySet_add_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::MapChangedEventHandler<winrt::hstring, winrt::Windows::Foundation::IInspectable>>(arg);
        
        auto return_value = self->obj.MapChanged(param0);
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IPropertySet_remove_MapChanged(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* arg)
{
    try
    {
        auto param0 = py::convert_to<winrt::event_token>(arg);
        
        self->obj.MapChanged(param0);
        
        Py_RETURN_NONE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IPropertySet_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Foundation::Collections::IPropertySet>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IPropertySet_iter(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self)
{
    try
    {
        return py::convert(self->obj.First());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static Py_ssize_t __IPropertySet_mp_length(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self)
{
    try
    {
        return static_cast<Py_ssize_t>(self->obj.Size());
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyObject* __IPropertySet_mp_subscript(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* key)
{
    try
    {
        return py::convert(self->obj.Lookup(py::convert_to<winrt::hstring>(key)));
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int __IPropertySet_mp_ass_item(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>* self, PyObject* key, PyObject* value)
{
    try
    {
        if (value == nullptr) { self->obj.Remove(py::convert_to<winrt::hstring>(key)); }
        else { self->obj.Insert(py::convert_to<winrt::hstring>(key), py::convert_to<winrt::Windows::Foundation::IInspectable>(value)); }
        return 0;
    }
    catch (...)
    {
        py::to_PyErr();
        return -1;
    }
}

static PyMethodDef IPropertySet_methods[] = {
    { "Clear", (PyCFunction)IPropertySet_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)IPropertySet_First, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)IPropertySet_GetView, METH_VARARGS, nullptr },
    { "HasKey", (PyCFunction)IPropertySet_HasKey, METH_VARARGS, nullptr },
    { "Insert", (PyCFunction)IPropertySet_Insert, METH_VARARGS, nullptr },
    { "Lookup", (PyCFunction)IPropertySet_Lookup, METH_VARARGS, nullptr },
    { "Remove", (PyCFunction)IPropertySet_Remove, METH_VARARGS, nullptr },
    { "add_MapChanged", (PyCFunction)IPropertySet_add_MapChanged, METH_O, nullptr },
    { "remove_MapChanged", (PyCFunction)IPropertySet_remove_MapChanged, METH_O, nullptr },
    { "_from", (PyCFunction)__IPropertySet_from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyGetSetDef IPropertySet_getset[] = {
    { const_cast<char*>("Size"), (getter)IPropertySet_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IPropertySet_Type_slots[] = 
{
    { Py_tp_dealloc, IPropertySet_dealloc },
    { Py_tp_new, IPropertySet_new },
    { Py_tp_methods, IPropertySet_methods },
    { Py_tp_getset, IPropertySet_getset },
    { Py_tp_iter, __IPropertySet_iter },
    { Py_mp_length, __IPropertySet_mp_length },
    { Py_mp_subscript, __IPropertySet_mp_subscript },
    { Py_mp_ass_subscript, __IPropertySet_mp_ass_item },
    { 0, nullptr },
};

static PyType_Spec IPropertySet_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IPropertySet",
    sizeof(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IPropertySet>),
    0,
    Py_TPFLAGS_DEFAULT,
    IPropertySet_Type_slots
};

// ----- IVectorChangedEventArgs interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>::python_type;

PyObject* IVectorChangedEventArgs_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IVectorChangedEventArgs interface is not activatable");
    return nullptr;
}

static void IVectorChangedEventArgs_dealloc(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IVectorChangedEventArgs_get_CollectionChange(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.CollectionChange();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* IVectorChangedEventArgs_get_Index(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Index();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IVectorChangedEventArgs_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyMethodDef IVectorChangedEventArgs_methods[] = {
    { "_from", (PyCFunction)__IVectorChangedEventArgs_from, METH_O | METH_STATIC, nullptr },
    { nullptr }
};

static PyGetSetDef IVectorChangedEventArgs_getset[] = {
    { const_cast<char*>("CollectionChange"), (getter)IVectorChangedEventArgs_get_CollectionChange, nullptr, nullptr, nullptr },
    { const_cast<char*>("Index"), (getter)IVectorChangedEventArgs_get_Index, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IVectorChangedEventArgs_Type_slots[] = 
{
    { Py_tp_dealloc, IVectorChangedEventArgs_dealloc },
    { Py_tp_new, IVectorChangedEventArgs_new },
    { Py_tp_methods, IVectorChangedEventArgs_methods },
    { Py_tp_getset, IVectorChangedEventArgs_getset },
    { 0, nullptr },
};

static PyType_Spec IVectorChangedEventArgs_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IVectorChangedEventArgs",
    sizeof(py::winrt_wrapper<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>),
    0,
    Py_TPFLAGS_DEFAULT,
    IVectorChangedEventArgs_Type_slots
};

// ----- IVectorView interface --------------------

PyTypeObject* py::winrt_type<pyIVectorView>::python_type;

PyObject* IVectorView_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IVectorView interface is not activatable");
    return nullptr;
}

static void IVectorView_dealloc(py::winrt_pinterface_wrapper<pyIVectorView>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IVectorView_First(py::winrt_pinterface_wrapper<pyIVectorView>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IVectorView_GetAt(py::winrt_pinterface_wrapper<pyIVectorView>* self, PyObject* args)
{
    return self->obj->GetAt(args);
}

static PyObject* IVectorView_GetMany(py::winrt_pinterface_wrapper<pyIVectorView>* self, PyObject* args)
{
    return self->obj->GetMany(args);
}

static PyObject* IVectorView_IndexOf(py::winrt_pinterface_wrapper<pyIVectorView>* self, PyObject* args)
{
    return self->obj->IndexOf(args);
}

static PyObject* IVectorView_get_Size(py::winrt_pinterface_wrapper<pyIVectorView>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* __IVectorView_iter(py::winrt_pinterface_wrapper<pyIVectorView>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IVectorView_sq_length(py::winrt_pinterface_wrapper<pyIVectorView>* self)
{
    return self->obj->_sq_length();
}

static PyObject* __IVectorView_sq_item(py::winrt_pinterface_wrapper<pyIVectorView>* self, Py_ssize_t i)
{
    return self->obj->_sq_item(i);
}

static PyMethodDef IVectorView_methods[] = {
    { "First", (PyCFunction)IVectorView_First, METH_VARARGS, nullptr },
    { "GetAt", (PyCFunction)IVectorView_GetAt, METH_VARARGS, nullptr },
    { "GetMany", (PyCFunction)IVectorView_GetMany, METH_VARARGS, nullptr },
    { "IndexOf", (PyCFunction)IVectorView_IndexOf, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IVectorView_getset[] = {
    { const_cast<char*>("Size"), (getter)IVectorView_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IVectorView_Type_slots[] = 
{
    { Py_tp_dealloc, IVectorView_dealloc },
    { Py_tp_new, IVectorView_new },
    { Py_tp_methods, IVectorView_methods },
    { Py_tp_getset, IVectorView_getset },
    { Py_tp_iter, __IVectorView_iter },
    { Py_sq_length, __IVectorView_sq_length },
    { Py_sq_item, __IVectorView_sq_item },
    { 0, nullptr },
};

static PyType_Spec IVectorView_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IVectorView",
    sizeof(py::winrt_pinterface_wrapper<pyIVectorView>),
    0,
    Py_TPFLAGS_DEFAULT,
    IVectorView_Type_slots
};

// ----- IVector interface --------------------

PyTypeObject* py::winrt_type<pyIVector>::python_type;

PyObject* IVector_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IVector interface is not activatable");
    return nullptr;
}

static void IVector_dealloc(py::winrt_pinterface_wrapper<pyIVector>* self)
{
    auto hash_value = self->obj->hash();
    py::wrapped_instance(hash_value, nullptr);
    self->obj.release();
}

static PyObject* IVector_Append(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->Append(args);
}

static PyObject* IVector_Clear(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->Clear(args);
}

static PyObject* IVector_First(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->First(args);
}

static PyObject* IVector_GetAt(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->GetAt(args);
}

static PyObject* IVector_GetMany(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->GetMany(args);
}

static PyObject* IVector_GetView(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->GetView(args);
}

static PyObject* IVector_IndexOf(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->IndexOf(args);
}

static PyObject* IVector_InsertAt(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->InsertAt(args);
}

static PyObject* IVector_RemoveAt(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->RemoveAt(args);
}

static PyObject* IVector_RemoveAtEnd(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->RemoveAtEnd(args);
}

static PyObject* IVector_ReplaceAll(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->ReplaceAll(args);
}

static PyObject* IVector_SetAt(py::winrt_pinterface_wrapper<pyIVector>* self, PyObject* args)
{
    return self->obj->SetAt(args);
}

static PyObject* IVector_get_Size(py::winrt_pinterface_wrapper<pyIVector>* self, void* /*unused*/)
{
    return self->obj->get_Size(/*unused*/);
}

static PyObject* __IVector_iter(py::winrt_pinterface_wrapper<pyIVector>* self)
{
    return self->obj->dunder_iter();
}

static Py_ssize_t __IVector_sq_length(py::winrt_pinterface_wrapper<pyIVector>* self)
{
    return self->obj->_sq_length();
}

static PyObject* __IVector_sq_item(py::winrt_pinterface_wrapper<pyIVector>* self, Py_ssize_t i)
{
    return self->obj->_sq_item(i);
}

static int __IVector_sq_ass_item(py::winrt_pinterface_wrapper<pyIVector>* self, Py_ssize_t i, PyObject* value)
{
    return self->obj->_sq_ass_item(i, value);
}

static PyMethodDef IVector_methods[] = {
    { "Append", (PyCFunction)IVector_Append, METH_VARARGS, nullptr },
    { "Clear", (PyCFunction)IVector_Clear, METH_VARARGS, nullptr },
    { "First", (PyCFunction)IVector_First, METH_VARARGS, nullptr },
    { "GetAt", (PyCFunction)IVector_GetAt, METH_VARARGS, nullptr },
    { "GetMany", (PyCFunction)IVector_GetMany, METH_VARARGS, nullptr },
    { "GetView", (PyCFunction)IVector_GetView, METH_VARARGS, nullptr },
    { "IndexOf", (PyCFunction)IVector_IndexOf, METH_VARARGS, nullptr },
    { "InsertAt", (PyCFunction)IVector_InsertAt, METH_VARARGS, nullptr },
    { "RemoveAt", (PyCFunction)IVector_RemoveAt, METH_VARARGS, nullptr },
    { "RemoveAtEnd", (PyCFunction)IVector_RemoveAtEnd, METH_VARARGS, nullptr },
    { "ReplaceAll", (PyCFunction)IVector_ReplaceAll, METH_VARARGS, nullptr },
    { "SetAt", (PyCFunction)IVector_SetAt, METH_VARARGS, nullptr },
    { nullptr }
};

static PyGetSetDef IVector_getset[] = {
    { const_cast<char*>("Size"), (getter)IVector_get_Size, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IVector_Type_slots[] = 
{
    { Py_tp_dealloc, IVector_dealloc },
    { Py_tp_new, IVector_new },
    { Py_tp_methods, IVector_methods },
    { Py_tp_getset, IVector_getset },
    { Py_tp_iter, __IVector_iter },
    { Py_sq_length, __IVector_sq_length },
    { Py_sq_item, __IVector_sq_item },
    { Py_sq_ass_item, __IVector_sq_ass_item },
    { 0, nullptr },
};

static PyType_Spec IVector_Type_spec =
{
    "_pyrt_Windows_Foundation_Collections.IVector",
    sizeof(py::winrt_pinterface_wrapper<pyIVector>),
    0,
    Py_TPFLAGS_DEFAULT,
    IVector_Type_slots
};

// ----- Windows.Foundation.Collections Initialization --------------------

static int module_exec(PyObject* module)
{
    py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };
    
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&PropertySet_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "PropertySet", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Foundation::Collections::PropertySet>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&StringMap_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "StringMap", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Foundation::Collections::StringMap>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&ValueSet_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "ValueSet", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Foundation::Collections::ValueSet>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IIterable_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IIterable", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIIterable>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IIterator_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IIterator", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIIterator>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IKeyValuePair_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IKeyValuePair", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIKeyValuePair>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IMapChangedEventArgs_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IMapChangedEventArgs", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIMapChangedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IMapView_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IMapView", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIMapView>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IMap_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IMap", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIMap>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IObservableMap_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IObservableMap", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIObservableMap>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IObservableVector_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IObservableVector", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIObservableVector>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IPropertySet_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IPropertySet", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Foundation::Collections::IPropertySet>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IVectorChangedEventArgs_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IVectorChangedEventArgs", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Foundation::Collections::IVectorChangedEventArgs>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IVectorView_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IVectorView", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIVectorView>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IVector_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IVector", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<pyIVector>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    return 0;
}

static PyModuleDef_Slot module_slots[] = {
    {Py_mod_exec, module_exec},
    {0, nullptr}
};

PyDoc_STRVAR(module_doc, "Windows.Foundation.Collections");

static PyModuleDef module_def = {
    PyModuleDef_HEAD_INIT,
    "_pyrt_Windows_Foundation_Collections",
    module_doc,
    0,
    nullptr,
    module_slots,
    nullptr,
    nullptr,
    nullptr
};

PyMODINIT_FUNC
PyInit__pyrt_Windows_Foundation_Collections(void)
{
    return PyModuleDef_Init(&module_def);
}
