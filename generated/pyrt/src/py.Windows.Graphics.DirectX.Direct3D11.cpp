// WARNING: Please don't edit this file. It was generated by Python/WinRT

#include "py.Windows.Graphics.DirectX.Direct3D11.h"

// ----- IDirect3DDevice interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::python_type;

PyObject* IDirect3DDevice_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IDirect3DDevice interface is not activatable");
    return nullptr;
}

static void IDirect3DDevice_dealloc(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IDirect3DDevice_Close(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Close();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IDirect3DDevice_Trim(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Trim();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* __IDirect3DDevice_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IDirect3DDevice_enter(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>* self)
{
    Py_INCREF(self);
    return (PyObject*)self;
}

static PyObject* __IDirect3DDevice_exit(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>* self)
{
    try
    {
        self->obj.Close();
        Py_RETURN_FALSE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyMethodDef IDirect3DDevice_methods[] = {
    { "Close", (PyCFunction)IDirect3DDevice_Close, METH_VARARGS, nullptr },
    { "Trim", (PyCFunction)IDirect3DDevice_Trim, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)__IDirect3DDevice_from, METH_O | METH_STATIC, nullptr },
    { "__enter__", (PyCFunction)__IDirect3DDevice_enter, METH_O, nullptr },
    { "__exit__",  (PyCFunction)__IDirect3DDevice_exit,  METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef IDirect3DDevice_getset[] = {
    { nullptr }
};

static PyType_Slot IDirect3DDevice_Type_slots[] = 
{
    { Py_tp_dealloc, IDirect3DDevice_dealloc },
    { Py_tp_new, IDirect3DDevice_new },
    { Py_tp_methods, IDirect3DDevice_methods },
    { Py_tp_getset, IDirect3DDevice_getset },
    { 0, nullptr },
};

static PyType_Spec IDirect3DDevice_Type_spec =
{
    "_pyrt_Windows_Graphics_DirectX_Direct3D11.IDirect3DDevice",
    sizeof(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>),
    0,
    Py_TPFLAGS_DEFAULT,
    IDirect3DDevice_Type_slots
};

// ----- IDirect3DSurface interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::python_type;

PyObject* IDirect3DSurface_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    PyErr_SetString(PyExc_TypeError, "IDirect3DSurface interface is not activatable");
    return nullptr;
}

static void IDirect3DSurface_dealloc(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IDirect3DSurface_Close(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        try
        {
            self->obj.Close();
            
            Py_RETURN_NONE;
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    
    return nullptr;
}

static PyObject* IDirect3DSurface_get_Description(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>* self, void* /*unused*/)
{
    try
    {
        auto return_value = self->obj.Description();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        
        return out_return_value.detach();
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IDirect3DSurface_from(PyObject* /*unused*/, PyObject* arg)
{
    try
    {
        auto instance = py::converter<winrt::Windows::Foundation::IInspectable>::convert_to(arg);
        return py::convert(instance.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>());
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyObject* __IDirect3DSurface_enter(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>* self)
{
    Py_INCREF(self);
    return (PyObject*)self;
}

static PyObject* __IDirect3DSurface_exit(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>* self)
{
    try
    {
        self->obj.Close();
        Py_RETURN_FALSE;
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static PyMethodDef IDirect3DSurface_methods[] = {
    { "Close", (PyCFunction)IDirect3DSurface_Close, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)__IDirect3DSurface_from, METH_O | METH_STATIC, nullptr },
    { "__enter__", (PyCFunction)__IDirect3DSurface_enter, METH_O, nullptr },
    { "__exit__",  (PyCFunction)__IDirect3DSurface_exit,  METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef IDirect3DSurface_getset[] = {
    { const_cast<char*>("Description"), (getter)IDirect3DSurface_get_Description, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot IDirect3DSurface_Type_slots[] = 
{
    { Py_tp_dealloc, IDirect3DSurface_dealloc },
    { Py_tp_new, IDirect3DSurface_new },
    { Py_tp_methods, IDirect3DSurface_methods },
    { Py_tp_getset, IDirect3DSurface_getset },
    { 0, nullptr },
};

static PyType_Spec IDirect3DSurface_Type_spec =
{
    "_pyrt_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurface",
    sizeof(py::winrt_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>),
    0,
    Py_TPFLAGS_DEFAULT,
    IDirect3DSurface_Type_slots
};

// ----- Direct3DMultisampleDescription struct --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::python_type;

PyObject* py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert(winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription instance) noexcept
{
    return py::wrap_struct<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(instance, py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>());
}

winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);
    
    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>*>(obj)->obj;
    }
    
    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }
    
    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription new_value{};
    
    PyObject* py_Count = PyDict_GetItemString(obj, "Count");
    if (!py_Count) { throw winrt::hresult_invalid_argument(); }
    new_value.Count = converter<int32_t>::convert_to(py_Count);
    
    PyObject* py_Quality = PyDict_GetItemString(obj, "Quality");
    if (!py_Quality) { throw winrt::hresult_invalid_argument(); }
    new_value.Quality = converter<int32_t>::convert_to(py_Quality);
    
    return new_value;
}

PyObject* Direct3DMultisampleDescription_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    auto tuple_size = PyTuple_Size(args);
    
    if ((tuple_size == 0) && (kwds == nullptr))
    {
        try
        {
            winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription instance{};
            return py::wrap_struct(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    };
    
    if ((tuple_size == 1) && (kwds == nullptr))
    {
        auto arg = PyTuple_GetItem(args, 0);
        if (PyDict_Check(arg))
        {
            try
            {
                auto instance = py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(arg);
                return py::wrap_struct(instance, type);
            }
            catch (...)
            {
                return py::to_PyErr();
            }
        };
    };
    
    int32_t _Count{};
    int32_t _Quality{};
    
    static char* kwlist[] = {"Count", "Quality", nullptr};
    if (!PyArg_ParseTupleAndKeywords(args, kwds, "ii", kwlist, &_Count, &_Quality))
    {
        return nullptr;
    }
    
    try
    {
        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription instance{ _Count, _Quality };
        return py::wrap_struct(instance, type);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static void Direct3DMultisampleDescription_dealloc(PyObject*)
{
}

static PyObject* Direct3DMultisampleDescription_get_Count(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.Count);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DMultisampleDescription_set_Count(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Count = py::converter<int32_t>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyObject* Direct3DMultisampleDescription_get_Quality(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.Quality);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DMultisampleDescription_set_Quality(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Quality = py::converter<int32_t>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyGetSetDef Direct3DMultisampleDescription_getset[] = {
    { const_cast<char*>("Count"), (getter)Direct3DMultisampleDescription_get_Count, (setter)Direct3DMultisampleDescription_set_Count, nullptr, nullptr },
    { const_cast<char*>("Quality"), (getter)Direct3DMultisampleDescription_get_Quality, (setter)Direct3DMultisampleDescription_set_Quality, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot Direct3DMultisampleDescription_Type_slots[] = 
{
    { Py_tp_dealloc, Direct3DMultisampleDescription_dealloc },
    { Py_tp_new, Direct3DMultisampleDescription_new },
    { Py_tp_getset, Direct3DMultisampleDescription_getset },
    { 0, nullptr },
};

static PyType_Spec Direct3DMultisampleDescription_Type_spec =
{
    "_pyrt_Windows_Graphics_DirectX_Direct3D11.Direct3DMultisampleDescription",
    sizeof(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>),
    0,
    Py_TPFLAGS_DEFAULT,
    Direct3DMultisampleDescription_Type_slots
};

// ----- Direct3DSurfaceDescription struct --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::python_type;

PyObject* py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::convert(winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription instance) noexcept
{
    return py::wrap_struct<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>(instance, py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>());
}

winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);
    
    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>*>(obj)->obj;
    }
    
    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }
    
    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription new_value{};
    
    PyObject* py_Width = PyDict_GetItemString(obj, "Width");
    if (!py_Width) { throw winrt::hresult_invalid_argument(); }
    new_value.Width = converter<int32_t>::convert_to(py_Width);
    
    PyObject* py_Height = PyDict_GetItemString(obj, "Height");
    if (!py_Height) { throw winrt::hresult_invalid_argument(); }
    new_value.Height = converter<int32_t>::convert_to(py_Height);
    
    PyObject* py_Format = PyDict_GetItemString(obj, "Format");
    if (!py_Format) { throw winrt::hresult_invalid_argument(); }
    new_value.Format = converter<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>::convert_to(py_Format);
    
    PyObject* py_MultisampleDescription = PyDict_GetItemString(obj, "MultisampleDescription");
    if (!py_MultisampleDescription) { throw winrt::hresult_invalid_argument(); }
    new_value.MultisampleDescription = converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(py_MultisampleDescription);
    
    return new_value;
}

PyObject* Direct3DSurfaceDescription_new(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    auto tuple_size = PyTuple_Size(args);
    
    if ((tuple_size == 0) && (kwds == nullptr))
    {
        try
        {
            winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription instance{};
            return py::wrap_struct(instance, type);
        }
        catch (...)
        {
            return py::to_PyErr();
        }
    };
    
    if ((tuple_size == 1) && (kwds == nullptr))
    {
        auto arg = PyTuple_GetItem(args, 0);
        if (PyDict_Check(arg))
        {
            try
            {
                auto instance = py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::convert_to(arg);
                return py::wrap_struct(instance, type);
            }
            catch (...)
            {
                return py::to_PyErr();
            }
        };
    };
    
    int32_t _Width{};
    int32_t _Height{};
    int32_t _Format{};
    PyObject* _MultisampleDescription{};
    
    static char* kwlist[] = {"Width", "Height", "Format", "MultisampleDescription", nullptr};
    if (!PyArg_ParseTupleAndKeywords(args, kwds, "iiiO", kwlist, &_Width, &_Height, &_Format, &_MultisampleDescription))
    {
        return nullptr;
    }
    
    try
    {
        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription instance{ _Width, _Height, static_cast<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(_Format), py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(_MultisampleDescription) };
        return py::wrap_struct(instance, type);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static void Direct3DSurfaceDescription_dealloc(PyObject*)
{
}

static PyObject* Direct3DSurfaceDescription_get_Width(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.Width);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DSurfaceDescription_set_Width(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Width = py::converter<int32_t>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyObject* Direct3DSurfaceDescription_get_Height(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.Height);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DSurfaceDescription_set_Height(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Height = py::converter<int32_t>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyObject* Direct3DSurfaceDescription_get_Format(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.Format);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DSurfaceDescription_set_Format(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.Format = py::converter<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyObject* Direct3DSurfaceDescription_get_MultisampleDescription(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, void* /*unused*/)
{
    try
    {
        return py::convert(self->obj.MultisampleDescription);
    }
    catch (...)
    {
        return py::to_PyErr();
    }
}

static int Direct3DSurfaceDescription_set_MultisampleDescription(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>* self, PyObject* value, void* /*unused*/)
{
    if (value == nullptr)
    {
        PyErr_SetString(PyExc_TypeError, "property delete not supported");
        return -1;
    }
    
    try
    {
        self->obj.MultisampleDescription = py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(value);
        return 0;
    }
    catch (...)
    {
        return -1;
    }
}

static PyGetSetDef Direct3DSurfaceDescription_getset[] = {
    { const_cast<char*>("Width"), (getter)Direct3DSurfaceDescription_get_Width, (setter)Direct3DSurfaceDescription_set_Width, nullptr, nullptr },
    { const_cast<char*>("Height"), (getter)Direct3DSurfaceDescription_get_Height, (setter)Direct3DSurfaceDescription_set_Height, nullptr, nullptr },
    { const_cast<char*>("Format"), (getter)Direct3DSurfaceDescription_get_Format, (setter)Direct3DSurfaceDescription_set_Format, nullptr, nullptr },
    { const_cast<char*>("MultisampleDescription"), (getter)Direct3DSurfaceDescription_get_MultisampleDescription, (setter)Direct3DSurfaceDescription_set_MultisampleDescription, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot Direct3DSurfaceDescription_Type_slots[] = 
{
    { Py_tp_dealloc, Direct3DSurfaceDescription_dealloc },
    { Py_tp_new, Direct3DSurfaceDescription_new },
    { Py_tp_getset, Direct3DSurfaceDescription_getset },
    { 0, nullptr },
};

static PyType_Spec Direct3DSurfaceDescription_Type_spec =
{
    "_pyrt_Windows_Graphics_DirectX_Direct3D11.Direct3DSurfaceDescription",
    sizeof(py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>),
    0,
    Py_TPFLAGS_DEFAULT,
    Direct3DSurfaceDescription_Type_slots
};

// ----- Windows.Graphics.DirectX.Direct3D11 Initialization --------------------

static int module_exec(PyObject* module)
{
    py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };
    
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IDirect3DDevice_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IDirect3DDevice", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&IDirect3DSurface_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "IDirect3DSurface", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&Direct3DMultisampleDescription_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "Direct3DMultisampleDescription", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    {
        py::pyobj_handle type_object { PyType_FromSpecWithBases(&Direct3DSurfaceDescription_Type_spec, bases.get()) };
        if (!type_object)
        {
            return -1;
        }
        if (PyModule_AddObject(module, "Direct3DSurfaceDescription", type_object.get()) != 0)
        {
            return -1;
        }
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::python_type = reinterpret_cast<PyTypeObject*>(type_object.detach());
    }
    return 0;
}

static PyModuleDef_Slot module_slots[] = {
    {Py_mod_exec, module_exec},
    {0, nullptr}
};

PyDoc_STRVAR(module_doc, "Windows.Graphics.DirectX.Direct3D11");

static PyModuleDef module_def = {
    PyModuleDef_HEAD_INIT,
    "_pyrt_Windows_Graphics_DirectX_Direct3D11",
    module_doc,
    0,
    nullptr,
    module_slots,
    nullptr,
    nullptr,
    nullptr
};

PyMODINIT_FUNC
PyInit__pyrt_Windows_Graphics_DirectX_Direct3D11(void)
{
    return PyModuleDef_Init(&module_def);
}
