// WARNING: Please don't edit this file. It was generated by Python/WinRT

#include "py.Windows.Graphics.DirectX.Direct3D11.h"

// ----- IDirect3DDevice interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::python_type;
static const char* _type_name_IDirect3DDevice = "IDirect3DDevice";

static PyObject* _new_IDirect3DDevice(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
{
    std::string msg{ _type_name_IDirect3DDevice };
    msg.append(" interface is not activatable");
    PyErr_SetString(PyExc_TypeError, msg.c_str());
    return nullptr;
}

static void _dealloc_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IDirect3DDevice_Close(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        return py::trycatch_invoker([=]() -> PyObject*
        {
            self->obj.Close();
            
            Py_RETURN_NONE;
        }, nullptr);
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    return nullptr;
}

static PyObject* IDirect3DDevice_Trim(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        return py::trycatch_invoker([=]() -> PyObject*
        {
            self->obj.Trim();
            
            Py_RETURN_NONE;
        }, nullptr);
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    return nullptr;
}

static PyObject* _from_IDirect3DDevice(PyObject* /*unused*/, PyObject* arg)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
        return py::convert(return_value.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>());
    }, nullptr);
}

static PyObject* _enter_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self)
{
    Py_INCREF(self);
    return (PyObject*)self;
}

static PyObject* _exit_IDirect3DDevice(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice* self)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        self->obj.Close();
        Py_RETURN_FALSE;
    }, nullptr);
}

static PyMethodDef _methods_IDirect3DDevice[] = {
    { "trim", (PyCFunction)IDirect3DDevice_Trim, METH_VARARGS, nullptr },
    { "close", (PyCFunction)IDirect3DDevice_Close, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)_from_IDirect3DDevice, METH_O | METH_STATIC, nullptr },
    { "__enter__", (PyCFunction)_enter_IDirect3DDevice, METH_O, nullptr },
    { "__exit__",  (PyCFunction)_exit_IDirect3DDevice,  METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef _getset_IDirect3DDevice[] = {
    { nullptr }
};

static PyType_Slot _type_slots_IDirect3DDevice[] = 
{
    { Py_tp_new, _new_IDirect3DDevice },
    { Py_tp_dealloc, _dealloc_IDirect3DDevice },
    { Py_tp_methods, _methods_IDirect3DDevice },
    { Py_tp_getset, _getset_IDirect3DDevice },
    { 0, nullptr },
};

static PyType_Spec _type_spec_IDirect3DDevice =
{
    "_winrt_Windows_Graphics_DirectX_Direct3D11.IDirect3DDevice",
    sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice),
    0,
    Py_TPFLAGS_DEFAULT,
    _type_slots_IDirect3DDevice
};

// ----- IDirect3DSurface interface --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::python_type;
static const char* _type_name_IDirect3DSurface = "IDirect3DSurface";

static PyObject* _new_IDirect3DSurface(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
{
    std::string msg{ _type_name_IDirect3DSurface };
    msg.append(" interface is not activatable");
    PyErr_SetString(PyExc_TypeError, msg.c_str());
    return nullptr;
}

static void _dealloc_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self)
{
    auto hash_value = std::hash<winrt::Windows::Foundation::IInspectable>{}(self->obj);
    py::wrapped_instance(hash_value, nullptr);
    self->obj = nullptr;
}

static PyObject* IDirect3DSurface_Close(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, PyObject* args)
{
    Py_ssize_t arg_count = PyTuple_Size(args);
    
    if (arg_count == 0)
    {
        return py::trycatch_invoker([=]() -> PyObject*
        {
            self->obj.Close();
            
            Py_RETURN_NONE;
        }, nullptr);
    }
    else if (arg_count != -1)
    {
        PyErr_SetString(PyExc_TypeError, "Invalid parameter count");
    }
    return nullptr;
}

static PyObject* IDirect3DSurface_get_Description(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        auto return_value = self->obj.Description();
        
        py::pyobj_handle out_return_value{ py::convert(return_value) };
        if (!out_return_value) 
        { 
            return nullptr;
        }
        return out_return_value.detach();
    }, nullptr);
}

static PyObject* _from_IDirect3DSurface(PyObject* /*unused*/, PyObject* arg)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
        return py::convert(return_value.as<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>());
    }, nullptr);
}

static PyObject* _enter_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self)
{
    Py_INCREF(self);
    return (PyObject*)self;
}

static PyObject* _exit_IDirect3DSurface(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface* self)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        self->obj.Close();
        Py_RETURN_FALSE;
    }, nullptr);
}

static PyMethodDef _methods_IDirect3DSurface[] = {
    { "close", (PyCFunction)IDirect3DSurface_Close, METH_VARARGS, nullptr },
    { "_from", (PyCFunction)_from_IDirect3DSurface, METH_O | METH_STATIC, nullptr },
    { "__enter__", (PyCFunction)_enter_IDirect3DSurface, METH_O, nullptr },
    { "__exit__",  (PyCFunction)_exit_IDirect3DSurface,  METH_O, nullptr },
    { nullptr }
};

static PyGetSetDef _getset_IDirect3DSurface[] = {
    { const_cast<char*>("description"), (getter)IDirect3DSurface_get_Description, nullptr, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot _type_slots_IDirect3DSurface[] = 
{
    { Py_tp_new, _new_IDirect3DSurface },
    { Py_tp_dealloc, _dealloc_IDirect3DSurface },
    { Py_tp_methods, _methods_IDirect3DSurface },
    { Py_tp_getset, _getset_IDirect3DSurface },
    { 0, nullptr },
};

static PyType_Spec _type_spec_IDirect3DSurface =
{
    "_winrt_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurface",
    sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface),
    0,
    Py_TPFLAGS_DEFAULT,
    _type_slots_IDirect3DSurface
};

// ----- Direct3DMultisampleDescription struct --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::python_type;
static const char* _type_name_Direct3DMultisampleDescription = "Direct3DMultisampleDescription";

PyObject* py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert(winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>());
}

winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);
        
    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>*>(obj)->obj;
    }
        
    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }
        
    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription return_value{};
    
    py::pyobj_handle py_Count{ PyDict_GetItemString(obj, "count") };
    if (!py_Count) { throw winrt::hresult_invalid_argument(); }
    return_value.Count = converter<int32_t>::convert_to(py_Count.get());
    
    py::pyobj_handle py_Quality{ PyDict_GetItemString(obj, "quality") };
    if (!py_Quality) { throw winrt::hresult_invalid_argument(); }
    return_value.Quality = converter<int32_t>::convert_to(py_Quality.get());
    
    return return_value;
}

PyObject* _new_Direct3DMultisampleDescription(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    auto tuple_size = PyTuple_Size(args);
    
    if ((tuple_size == 0) && (kwds == nullptr))
    {
        return py::trycatch_invoker([=]() -> PyObject*
        {
            winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription return_value{};
            return py::convert(return_value);
        }, nullptr);
    }
    
    if ((tuple_size == 1) && (kwds == nullptr))
    {
        auto arg = PyTuple_GetItem(args, 0);
        if (PyDict_Check(arg))
        {
            return py::trycatch_invoker([=]() -> PyObject*
            {
                auto return_value = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>(arg);
                return py::convert(return_value);
            }, nullptr);
        }
    }
    
    int32_t _Count{};
    int32_t _Quality{};
    
    static const char* kwlist[] = {"count", "quality", nullptr};
    if (!PyArg_ParseTupleAndKeywords(args, kwds, "ii", const_cast<char**>(kwlist), &_Count, &_Quality))
    {
        return nullptr;
    }
    
    return py::trycatch_invoker([=]() -> PyObject*
    {
        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription return_value{ _Count, _Quality };
        return py::convert(return_value);
    }, nullptr);
}

static void _dealloc_Direct3DMultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self)
{
}

static PyObject* Direct3DMultisampleDescription_get_Count(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.Count);
    }, nullptr);
}

static int Direct3DMultisampleDescription_set_Count(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.Count = py::converter<int32_t>::convert_to(arg);
        return 0;
    });
}

static PyObject* Direct3DMultisampleDescription_get_Quality(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.Quality);
    }, nullptr);
}

static int Direct3DMultisampleDescription_set_Quality(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.Quality = py::converter<int32_t>::convert_to(arg);
        return 0;
    });
}

static PyGetSetDef _getset_Direct3DMultisampleDescription[] = {
    { const_cast<char*>("count"), (getter)Direct3DMultisampleDescription_get_Count, (setter)Direct3DMultisampleDescription_set_Count, nullptr, nullptr },
    { const_cast<char*>("quality"), (getter)Direct3DMultisampleDescription_get_Quality, (setter)Direct3DMultisampleDescription_set_Quality, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot _type_slots_Direct3DMultisampleDescription[] = 
{
    { Py_tp_new, _new_Direct3DMultisampleDescription },
    { Py_tp_dealloc, _dealloc_Direct3DMultisampleDescription },
    { Py_tp_getset, _getset_Direct3DMultisampleDescription },
    { 0, nullptr },
};

static PyType_Spec _type_spec_Direct3DMultisampleDescription =
{
    "_winrt_Windows_Graphics_DirectX_Direct3D11.Direct3DMultisampleDescription",
    sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription),
    0,
    Py_TPFLAGS_DEFAULT,
    _type_slots_Direct3DMultisampleDescription
};

// ----- Direct3DSurfaceDescription struct --------------------

PyTypeObject* py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::python_type;
static const char* _type_name_Direct3DSurfaceDescription = "Direct3DSurfaceDescription";

PyObject* py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::convert(winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription instance) noexcept
{
    return py::wrap_struct(instance, py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>());
}

winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::convert_to(PyObject* obj)
{
    throw_if_pyobj_null(obj);
        
    if (Py_TYPE(obj) == py::get_python_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>())
    {
        return reinterpret_cast<py::winrt_struct_wrapper<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>*>(obj)->obj;
    }
        
    if (!PyDict_Check(obj))
    {
        throw winrt::hresult_invalid_argument();
    }
        
    winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription return_value{};
    
    py::pyobj_handle py_Width{ PyDict_GetItemString(obj, "width") };
    if (!py_Width) { throw winrt::hresult_invalid_argument(); }
    return_value.Width = converter<int32_t>::convert_to(py_Width.get());
    
    py::pyobj_handle py_Height{ PyDict_GetItemString(obj, "height") };
    if (!py_Height) { throw winrt::hresult_invalid_argument(); }
    return_value.Height = converter<int32_t>::convert_to(py_Height.get());
    
    py::pyobj_handle py_Format{ PyDict_GetItemString(obj, "format") };
    if (!py_Format) { throw winrt::hresult_invalid_argument(); }
    return_value.Format = converter<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>::convert_to(py_Format.get());
    
    py::pyobj_handle py_MultisampleDescription{ PyDict_GetItemString(obj, "multisample_description") };
    if (!py_MultisampleDescription) { throw winrt::hresult_invalid_argument(); }
    return_value.MultisampleDescription = converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(py_MultisampleDescription.get());
    
    return return_value;
}

PyObject* _new_Direct3DSurfaceDescription(PyTypeObject* type, PyObject* args, PyObject* kwds)
{
    auto tuple_size = PyTuple_Size(args);
    
    if ((tuple_size == 0) && (kwds == nullptr))
    {
        return py::trycatch_invoker([=]() -> PyObject*
        {
            winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription return_value{};
            return py::convert(return_value);
        }, nullptr);
    }
    
    if ((tuple_size == 1) && (kwds == nullptr))
    {
        auto arg = PyTuple_GetItem(args, 0);
        if (PyDict_Check(arg))
        {
            return py::trycatch_invoker([=]() -> PyObject*
            {
                auto return_value = py::convert_to<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>(arg);
                return py::convert(return_value);
            }, nullptr);
        }
    }
    
    int32_t _Width{};
    int32_t _Height{};
    int32_t _Format{};
    py::pyobj_handle _MultisampleDescription{};
    
    static const char* kwlist[] = {"width", "height", "format", "multisample_description", nullptr};
    if (!PyArg_ParseTupleAndKeywords(args, kwds, "iiiO", const_cast<char**>(kwlist), &_Width, &_Height, &_Format, _MultisampleDescription.put()))
    {
        return nullptr;
    }
    
    return py::trycatch_invoker([=, &_MultisampleDescription]() -> PyObject*
    {
        winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription return_value{ _Width, _Height, static_cast<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>(_Format), py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(_MultisampleDescription.get()) };
        return py::convert(return_value);
    }, nullptr);
}

static void _dealloc_Direct3DSurfaceDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self)
{
}

static PyObject* Direct3DSurfaceDescription_get_Width(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.Width);
    }, nullptr);
}

static int Direct3DSurfaceDescription_set_Width(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.Width = py::converter<int32_t>::convert_to(arg);
        return 0;
    });
}

static PyObject* Direct3DSurfaceDescription_get_Height(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.Height);
    }, nullptr);
}

static int Direct3DSurfaceDescription_set_Height(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.Height = py::converter<int32_t>::convert_to(arg);
        return 0;
    });
}

static PyObject* Direct3DSurfaceDescription_get_Format(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.Format);
    }, nullptr);
}

static int Direct3DSurfaceDescription_set_Format(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.Format = py::converter<winrt::Windows::Graphics::DirectX::DirectXPixelFormat>::convert_to(arg);
        return 0;
    });
}

static PyObject* Direct3DSurfaceDescription_get_MultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, void* /*unused*/)
{
    return py::trycatch_invoker([=]() -> PyObject*
    {
        return py::convert(self->obj.MultisampleDescription);
    }, nullptr);
}

static int Direct3DSurfaceDescription_set_MultisampleDescription(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription* self, PyObject* arg, void* /*unused*/)
{
    return py::setter_trycatch_invoker(arg, [=]() -> int
    {
        self->obj.MultisampleDescription = py::converter<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::convert_to(arg);
        return 0;
    });
}

static PyGetSetDef _getset_Direct3DSurfaceDescription[] = {
    { const_cast<char*>("width"), (getter)Direct3DSurfaceDescription_get_Width, (setter)Direct3DSurfaceDescription_set_Width, nullptr, nullptr },
    { const_cast<char*>("height"), (getter)Direct3DSurfaceDescription_get_Height, (setter)Direct3DSurfaceDescription_set_Height, nullptr, nullptr },
    { const_cast<char*>("format"), (getter)Direct3DSurfaceDescription_get_Format, (setter)Direct3DSurfaceDescription_set_Format, nullptr, nullptr },
    { const_cast<char*>("multisample_description"), (getter)Direct3DSurfaceDescription_get_MultisampleDescription, (setter)Direct3DSurfaceDescription_set_MultisampleDescription, nullptr, nullptr },
    { nullptr }
};

static PyType_Slot _type_slots_Direct3DSurfaceDescription[] = 
{
    { Py_tp_new, _new_Direct3DSurfaceDescription },
    { Py_tp_dealloc, _dealloc_Direct3DSurfaceDescription },
    { Py_tp_getset, _getset_Direct3DSurfaceDescription },
    { 0, nullptr },
};

static PyType_Spec _type_spec_Direct3DSurfaceDescription =
{
    "_winrt_Windows_Graphics_DirectX_Direct3D11.Direct3DSurfaceDescription",
    sizeof(py::wrapper::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription),
    0,
    Py_TPFLAGS_DEFAULT,
    _type_slots_Direct3DSurfaceDescription
};

// ----- Windows.Graphics.DirectX.Direct3D11 Initialization --------------------
static int module_exec(PyObject* module)
{
    py::pyobj_handle bases { PyTuple_Pack(1, py::winrt_type<py::winrt_base>::python_type) };
    
    try
    {
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice>::python_type = reinterpret_cast<PyTypeObject*>(py::register_python_type(module, _type_name_IDirect3DDevice, &_type_spec_IDirect3DDevice, bases.get()).detach());
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface>::python_type = reinterpret_cast<PyTypeObject*>(py::register_python_type(module, _type_name_IDirect3DSurface, &_type_spec_IDirect3DSurface, bases.get()).detach());
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DMultisampleDescription>::python_type = reinterpret_cast<PyTypeObject*>(py::register_python_type(module, _type_name_Direct3DMultisampleDescription, &_type_spec_Direct3DMultisampleDescription, bases.get()).detach());
        py::winrt_type<winrt::Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription>::python_type = reinterpret_cast<PyTypeObject*>(py::register_python_type(module, _type_name_Direct3DSurfaceDescription, &_type_spec_Direct3DSurfaceDescription, bases.get()).detach());
    }
    catch(...)
    {
        py::to_PyErr();
        return -1;
    }
    
    return 0;
}

static PyModuleDef_Slot module_slots[] = {
    {Py_mod_exec, module_exec},
    {0, nullptr}
};

PyDoc_STRVAR(module_doc, "Windows.Graphics.DirectX.Direct3D11");

static PyModuleDef module_def = {
    PyModuleDef_HEAD_INIT,
    "_winrt_Windows_Graphics_DirectX_Direct3D11",
    module_doc,
    0,
    nullptr,
    module_slots,
    nullptr,
    nullptr,
    nullptr
};

PyMODINIT_FUNC
PyInit__winrt_Windows_Graphics_DirectX_Direct3D11 (void)
{
    return PyModuleDef_Init(&module_def);
}
